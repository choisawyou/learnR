#1. 이 데이터셋의 자료구조 출력
str(mtcars)
#2. 이 데이터셋의 행의 개수와 열의 개수 출력
dim(mtcars)
#3. 이 데이터셋 열들의 자료형 출력
ncolumn(mtcars)
#3. 이 데이터셋 열들의 자료형 출력
ncol(mtcars)
#1. 이 데이터셋의 자료구조 출력
class(mtcars)
#3. 이 데이터셋 열들의 자료형 출력
str(mtcarscol)
#3. 이 데이터셋 열들의 자료형 출력
str(mtcars)
head(mtcars)
attach(mtcars)
mpg
max(mpg)
subset(mtcars,mpg == max.mtcars)
attach(mtcars)
mpg
max.mtcars <- max(mpg)
subset(mtcars,mpg == max.mtcars)
#5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
gear.4 <- subset(mtcars,gear == 4)
gear.4
#5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
gear.4 <- subset(mtcars,gear == 4)
gear.4
min(gear.4)
head(gear.4)
attach(gear.4)
min(gear.4)
attach(mtcars)
max.mtcars <- max(mpg)
subset(mtcars,mpg == max.mtcars)
#5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
gear.4 <- subset(mtcars,gear == 4)
gear.4
min(gear.4)
min(gear.4$mpg)
#5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
gear.4 <- subset(mtcars,gear == 4)
gear.4
low.mpg <- min(gear.4$mpg)
subset(gear.4,mpg == low.mpg )
#6. Honda Civic의 연비(mpg)와 gear 수 출력
mtcars["Honda Civic",c(mpg,gear)]
#6. Honda Civic의 연비(mpg)와 gear 수 출력
mtcars["Honda Civic",c("mpg","gear")]
#7. Pontiac Firebird 보다 연비가 좋은 자동차 모델 출력
subset(mtcars,PontiacFirebird$mpg)
#7. Pontiac Firebird 보다 연비가 좋은 자동차 모델 출력
str(mtcars)
head(mtcars)
mtcars
#7. Pontiac Firebird 보다 연비가 좋은 자동차 모델 출력
pfm <- mtcars["Pontiac Firebird","mpg"]
#7. Pontiac Firebird 보다 연비가 좋은 자동차 모델 출력
pfm <- mtcars["Pontiac Firebird",c("mpg")]
pfm
subset(mtcars,mpg > pfm)
mean(mtcats$mpg)
mean(mtcars$mpg)
#8. 자동차 모델들의 평균 연비 출력
mean(mtcars$mpg)
unique(   iris[,5])   #중복된 데이터 하나씩 뽑아서 factor로 나열
str( city.info )      #★변수이름($blah)과 자료형(num)
iris[ , 5]
str( city.info )      #★변수이름($blah)과 자료형(num)
city.info[1,1]
unique(mtcars,mtcars$gear)
unique(mtcars,mtcars$gear)
#9. gear의 수 종류 출력
table(mtcars[ ,"gear"])
head(mtcars)
airquality
airquality
#1. 이 데이터셋의 자료구조 출력
class(airquality)
#2. 이 데이터셋의 앞쪽 일부분 내용만 출력
head(airquality)
#2. 이 데이터셋의 앞쪽 일부분 내용만 출력
head(airquality)
max(Temp)
attach(airquality)
max(Temp)
subset(airquailty, Temp == max.Temp)
subset(airquality, Temp == max.Temp)
subset(airquality, Temp == max.temp)
attach(airquality)
max.temp <- max(Temp)
subset(airquality, Temp == max.temp)
max.temp
max.temp <- max(Temp)
max.temp
score[ 'Hong', 'Math']
score <- matrix(c(90,85,69,78,85,96,49,95,90,80,70,70),
nrow = 4 , ncol = 3)
score
rownames(score) <- c( "Hong" , "Kim", "Lee", "Yoo") #관측치
colnames(score) <- c("English", "Math", "Science") #변수
score
score[ 'Hong', 'Math']
score[ 'Kim',c('Math', 'Science')]
score[ 'Lee']
score[ ,'English']
rownames( score )
colnames (score)
colnames (score) [2]
max.temp
airquality["temp = max.temp","Month"]
#2. 이 데이터셋의 앞쪽 일부분 내용만 출력
head(airquality)
subset(airquality,Temp == max.temp)
max.temp1[,c("Month","Day")]
max.temp <- max(Temp)
max.temp
max.temp1 <- subset(airquality,Temp == max.temp)
max.temp1[,c("Month","Day")]
#4. 6월달에 발생한 가장 강한 바람(Wind)의 세기 출력
subset(airquality,Month == 6)
max(june$Wind)
june <- subset(airquality,Month == 6)
attach(june)
max(june$Wind)
june <- subset(airquality,Month == 6)
max(june$Wind)
#2. 이 데이터셋의 앞쪽 일부분 내용만 출력
head(airquality)
mean(july$Temp)
july <- subset(airquality, Month == 7)
mean(july$Temp)
ozone <- subset(airquality, Ozone > 100)
ozone <- subset(airquality, Ozone > 100)
length(ozone)
subset(state.x77, Income >= 5000)
state.x77
state.x77
subset(state.x77, Income >= 5000)
subset(state.x77,Income >= 5000)
head(state.x77)
subset(state.x77,Income>= 5000)
head(state.x77)
subset(state.x77,Income>= 5000)
subset(state.x77,Income >= 5000)
attach(state.x77)
subset(state.x77,Income >= 5000)
class(state.x77)
st <- date.frame(state.x77)
subset(state.x77,Income >= 5000)
st <- data.frame(state.x77)
subset(state.x77,Income >= 5000)
st <- data.frame(state.x77)
class(state.x77)
class(state.x77)
st <- data.frame(state.x77)
st <- data.frame(state.x77)
class(state.x77)
st <- data.frame(state.x77)
str(st)
class(state.x77)
is.matrix ( iris)    #is 함수는 결과값 항상 논리값
class(state.x77)
st <- data.frame(state.x77)
st
str(st)
class(st)
st <- data.frame(state.x77)
class(st)
subset(st,Income >= 5000)
st.1 <- subset(st,Income >= 5000)
st.2
class(state.x77)
st <- data.frame(state.x77)
class(st)
st.1 <- subset(st,Income >= 5000)
st.2 <- st.1[ , c("Income","Population","Area"]
st.2
class(state.x77)
st <- data.frame(state.x77)
class(st)
st.1 <- subset(st,Income >= 5000)
st.2 <- st.1[ ,c("Income","Population","Area")]
st.2
setwd("C:/Bigdata Maestro/learnR")
rich_state.csv <- write.csv(st,"rich_state.csv",row.names = F)
rich_state.csv <- write.csv(rich.st,"rich_state.csv",row.names = F)
class(state.x77)
st <- data.frame(state.x77)
class(st)
st.1 <- subset(st,Income >= 5000)
rich.st <- st.1[ ,c("Income","Population","Area")]
rich.st
setwd("C:/Bigdata Maestro/learnR")
rich_state.csv <- write.csv(rich.st,"rich_state.csv",row.names = F)
rich.st
install.packages("mlbench")
score[score == max(score
names(score[score == max(score)])
favorite <- c("WINTER","SUMMER","SPRING","SUMMER","SUMMER",
"FALL","FALL","SUMMER","SPRING","SPRING")
favorite
favorite
class( favorite)
table( favorite)
table(favorite)/ length ( favorite)
ds <-  table(favorite)
ds
barplot(ds,main = "favorite season")
ds.new <- ds[ c(2, 3, 1, 4)] #계절이름이 index의 이름 1 2 3 4
ds.new
barplot( ds.new, main = "favorite season")
barplot(ds,main = "favorite season")
mtcars
str(mtcars)
tmp1
tmp1 <- data.frame(wt,mpg)
tmp1
plot(wt,mpg,main = "중량과 연비 관계", xlab = " 중량", ylab = "연비")
wt <- mtcars$wt
mpg <- mtcars$mpg
plot(wt,mpg,main = "중량과 연비 관계", xlab = " 중량", ylab = "연비")
mtcars
str(mtcars)
wt <- mtcars$wt
mpg <- mtcars$mpg
plot(wt,mpg,main = "중량과 연비 관계",
xlab = " 중량", ylab = "연비" , pch = 4)
abline(mtcars)
plot(wt,mpg,main = "중량과 연비 관계",
xlab = " 중량", ylab = "연비" , pch = 4, ylim = c(0,50))
plot(wt,mpg,main = "중량과 연비 관계",
xlab = " 중량", ylab = "연비" , pch = 4, ylim = c(10,50))
plot(wt,mpg,main = "중량과 연비 관계",
xlab = " 중량", ylab = "연비" , pch = 4, ylim = c(10,40))
str(mtcars)
tmp <- c("mpg","disp","hp","qsec")
mtcars[,tmp]
head(target)
target <- mtcars[,tmp]
head(target)
pair(target, main ="pair")
pairs(target, main ="pair")
plot(wt,mpg, main ="a")
plot(mpg~wt ,main = "b")
plot(mtcars$wt,mtcars$mpg , main = "c")
plot(mtcars[ , c("wt","mpg")] , main = "d")
iris
str(iris)
class(iris)
iris
head(iris)
str(iris)
iris.2
iris.2 <- iris[ , 3:4]
iris.2
change
change <- as.numeric(iris$Species)
change
change
head(change)
plot(iris.2, main ="a" , pch = c(change) , col = color[change])
color <- c("red","blue","green")
plot(iris.2, main ="a" , pch = c(change) , col = color[change])
iris.2 <- iris[ , 3:4]
iris.2
change <- as.numeric(iris$Species)
head(change)
color <- c("red","blue","green")
plot(iris.2, main ="a" , pch = c(change) , col = color[change])
lovebeer
lovebeer <- data.frame(beer,bal)
lovebeer
beers <- c(5,2,9,8,3,7,3,5,3,5)
bal <- c(0.1,0.03,0.19,0.12,0.04,0.0095,0.07,0.06,0.02,0.05)
lovebeer <- data.frame(beer,bal)
lovebeer
lovebeer <- data.frame(beers,bal)
lovebeer
plot(lovebeer)
plot(bal~beer)
plot(bal~beers)
plot(bal~beers, data = lovebeer)
abline(line)
line<- lm(bal~beers,daya = lovebeer)
abline(line)
line<- lm(bal~beers,daya = lovebeer)
abline(line)
line<- lm(bal~beers,daya = lovebeer)
line<- lm(bal~beers,data = lovebeer)
line
abline(line)
lovebeer
cor(lovebeer[1:10,1:2])
cor(lovebeer[,1:2])
plot(month,late, main = " a ", type = "o", lty =1)
month <-  1:12
late <- c(5,8,7,9,4,6,12,13,8,6,6,4)
plot(month,late, main = " a ", type = "o", lty =1)
plot(month,late, main = " a ", type = "o", lty =2)
plot(month,late, main = " a ", type = "o", lty =2, lwd = 2)
lines(month,late2)
month <-  1:12
late <- c(5,8,7,9,4,6,12,13,8,6,6,4)
plot(month,late, main = " a ", type = "o", lty =2, lwd = 2)
late1 <- c(5,8,7,9,4,6,12,13,8,6,6,4)
late2 <- c(4,6,5,8,7,8,10,11,6,5,7,3)
lines(month,late2)
lines(month,late2, col = "red")
