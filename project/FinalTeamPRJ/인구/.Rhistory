library(tidyverse)
source('C:/workR/learnR/필기/20191217 15회차.R', encoding = 'UTF-8', echo=TRUE)
str(Prestige
str(Prestige)
str(Prestige)
head(Prestige)
head(newdata)
newdata <- Prstige[ , c( 1:4 )]
head(newdata)
newdata <- Prstige[ , c( 1:4 )]
newdata <- Prestige[ , c( 1:4 )]
head(newdata)
plot(newdata,pch = 16, col ='blue',
main = "Matrix Scatterplot")
model <- lm(income~edcation + Prestige+women,
data = newdata)
model <- lm(income~education + Prestige+women,
data = newdata)
model <- lm(income~education + Prestige+women,
data = newdata)
model <- lm(income~education + Prestige + women,
data = newdata)
model <- lm(income~education + prestige + women,
data = newdata)
model
coef(model)
coef(model)
plot(newdata,pch = 16, col ='pink',
main = "Matrix Scatterplot")
fitted(model)
residuals(model)
deviance(model)
deviance(model) / length(newdata$education)
summmary(model)
summary(model)
newdata2 <- Prestige[, c( 1:5)]
model2 <- lm(income~.,data=newdat2)
summary <- (model2)
newdata2 <- Prestige[, c( 1:5)]
model2 <- lm(income~.,data=newdata2)
summary <- (model2)
newdata2 <- Prestige[, c( 1:5)]
model2 <- lm(income~.,data=newdata2)
summary <- (model2)
summary (model2)
library(MASS)
model3 <- stepAIC(model2)
model3 <- stepAIC(model2)
summary(model3)
iris.new <- iris
irsi.new$Species
iris.new <- iris
iris.new$Species
iris.new$Species <- as.integer(iris.new$Species)
iris.new$Species
head(iris.new)
iris_model <- glm(Species~.,data = iris.new)
iris_model
summary(iris_model)
summary(iris_model)
coef(iris_model)
unknow <- data.frame(rbine(c(5.1,3.5,1.4,0.2)))
unknow <- data.frame(rbind(c(5.1,3.5,1.4,0.2)))
names(unknow) <- names(iris)[1:4]
unknown <- data.frame(rbind(c(5.1,3.5,1.4,0.2)))
names(unknown) <- names(iris)[1:4]
unknow
unknown
pred <- predict( iris_model, unknow)
pred <- predict( iris_model, unknown)
pred
round(pred,0)
round(pred,0)     #반올림함수수
pred <- round(pred,0)     #반올림함수수
levels(iris$Species)[Pred]
pred <- round(pred,0)     #반올림함수
levels(iris$Species)[pred]
test <- iris[,1:4]
test
pred <-  predict(iris_model , text)
pred <-  predict(iris_model , text)
pred <-  predict(iris_model , test)
pred <- round( pred, 0)
pred
pred <- round( pred, 0)
pred
answer <- as.integer(iris$Species)
pred == answer
acc <- mean( pred ==  answer)
acc
test
pred <-  predict(iris_model , test)
pred <- round( pred, 0)
test <- iris[,1:4]
test
pred <-  predict(iris_model , test) ;pred
pred <- round( pred, 0)
pred
answer <- as.integer(iris$Species)
pred <-  predict(iris_model , test) ;pred
test <- iris[,1:4]  #iris 함수로 test
test <- iris[,1:4]  #iris 함수로 test
test
pred <- round( pred, 0)
pred <-  predict(iris_model , test) ;pred
pred <-  predict(iris_model, test) ;pred
pred <- round( pred, 0)
pred
#문1)
#trees 데이터셋에 대해 다음의 문제를 해결하는 R 코드를 작성하시오.
str(trees)
head(trees)
#(1) 나무 둘레(Girth)와 나무의 키(Height)로 나무의 볼륨을 예측하는 다중선형 회귀
#모델을 만드시오.
#y = Volume
#x = girth,height
model.tree <- lm(Volume~Girth + Height , data = trees)
coef(model.tree)
#(2) 다중선형 회귀모델을 이용하여 trees 데이터셋의 나무 둘레(Girth)와 나무의 키
#(Height)로 나무의 볼륨을 예측하시오.
fitted(model.tree)
#(3) (2)에서 예측한 볼륨과 실제 trees 데이터셋의 볼륨(Volume)이 얼마나 차이가
#나는지 보이시오. (예측값, 실제값, 예측값-실제값을 나타낸다.)
residuals(model.tree)
model.mt(mpg~.,data = mtcars)
model.mt <- lm(mpg~.,data = mtcars)
model.mt <- lm(mpg~.,data = mtcars) ; model.mt
summary(model.mt)
coef(model.mt)
#만들고 회귀식을 나타내시오.
summary(model.mt)
coef(model.mt)
newdata2 <- Prestige[, c( 1:5)]
model2 <- lm(income~.,data=newdata2) #이하전체다 : y~.
summary (model2)
#(2) 연비(mpg)를 예측하는 데 도움이 되는 변수들만 사용하여 예측하는 회귀모델을
#만들고 회귀식을 나타내시오.
summary(model.mt)
md.mt <- stepAIC(model.mt)
md.mt <- stepAIC(model.mt)
model3 <- stepAIC(model2) ###y값과 영향력이 적은 x값 자동 제거###
md.mt <- stepAIC(model.mt)
summary(md.mt)
summary(model.mt)
md.mt <- stepAIC(model.mt)
summary(md.mt)
mydata <- read.csv( "https://stats.idre.ucla.edu/stat/data/binary.csv" )
str(mydata)
int.adm <- as.integer(mydata$admit)
str(mydata)
mydata <- read.csv( "https://stats.idre.ucla.edu/stat/data/binary.csv" )
str(mydata)
data.int <- as.integer(mydata$admit)
data.int
str(mydata)
data_model <- glm(admit~gre + gpa + rank)
data_model <- glm(admit~gre + gpa + rank, data.int)
data.int <- as.integer(mydata$admit)
data.int
data_model <- glm(admit~gre + gpa + rank, data.int)
data_model <- glm(admit~gre + gpa + rank,data = data.int)
mydata_new
mydata.n <- mydata
mydata.n$admit <- as.integer(mydata$admit)
data_model <- glm(admit~gre + gpa + rank,data = mydata.n)
data_model
coef(data_model)
summary(data_model
summary(data_model)
summary(data_model)
#(2) mydata에서 합격 여부(admit)를 제외한 데이터를 예측 대상 데이터로 하여
head(mydata)
data <- mydata[,c(2:4)]
data
testing <- predict(data_model,data)
testing
test.round <- round(testing,0)
test.round
answer <- as.integer(iris$Species)
pred == answer
result <- as.integer(mydata$admit)
result
pred == answer
result == test.round
result == test.round
result == test.round
standard <- as.integer(mydata$admit)
standard == test.round
standard == test.round
pred == answer
acc <- mean( pred ==  answer)
acc      #예측 성공률
rat <- mean(standard == test.round)
rat
ratio <- mean(standard == test.round)
ratio
standard == test.round
a <- standard == test.round
a#(3) 만들어진 모델의 예측 정확도를 나타내시오.
a
subset(a,'TRUE')
summary(data_model)
#실제값 standard
#예측값 test.round
standard <- as.integer(mydata$admit)
#실제값 standard
#예측값 test.round
standard <- as.integer(mydata$admit)
a <- standard == test.round
a
pred <- round(pred)
pred #예측값
my <- mydata[,-1]; head(my)
pred <- predict(adm, my)
head(pred)
pred <- round(pred)
pred #예측값
answer <- mydata$admit # 실제값
# (3) 만들어진 모델의 예측 정확도를 나타내시오.
pred == answer
mod <- mean(pred == answer)
mod
head(pred)
pred <- round(pred)
pred #예측값
#
# 작성자 : 김대현
# 작성일 : 19.12.17
# 제출일 : 19.12.17
#
# 문1) trees 데이터셋에 대해 다음의 문제를 해결하는 R 코드를 작성하시오.
str(trees)
# (1) 나무 둘레(Girth)와 나무의 키(Height)로 나무의 볼륨을 예측하는 다중선형 회귀 모델을 만드시오.
model <- lm(Volume ~ Girth + Height, data = trees)
model
# (2) 다중선형 회귀모델을 이용하여 trees 데이터셋의 나무 둘레(Girth)와 나무의 키(Height)로 나무의 볼륨을 예측하시오.
predict(model)
# (3) (2)에서 예측한 볼륨과 실제 trees 데이터셋의 볼륨(Volume)이 얼마나 차이가 나는지 보이시오. (예측값, 실제값, 예측값-실제값을 나타낸다.)
trees$Volume # 실제값
fitted(model) # 예측값
residuals(model)
# 문2) mtcars 데이터셋에서 다른 변수들을 이용하여 연비(mpg)를 예측하는 다중 회귀모델을 만드시오.
str(mtcars)
# (1) 전체 변수를 이용하여 연비(mpg)를 예측하는 회귀모델을 만들고 회귀식을 나타내시오.
model2 <- lm(mpg ~cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb , data = mtcars)
model2
# (2) 연비(mpg)를 예측하는 데 도움이 되는 변수들만 사용하여 예측하는 회귀모델을 만들고 회귀식을 나타내시오.
library(MASS)
model22 <- stepAIC(model2)
model22
# (3) (1), (2)에서 만든 예측모델의 설명력(Adjusted R-squared)을 비교하시오.
summary(model2) # 설명력 : 0.8066
summary(model22) # 설명력 : 0.8336
# 연비를 예측하는 데 도움이 되는 변수들의 설명력이 더 좋다
# 문3) UCLA 대학원의 입학 데이터를 불러와서 mydata에 저장한 후 다음 물음에 답하시오.
mydata <- read.csv( "https://stats.idre.ucla.edu/stat/data/binary.csv" )
str(mydata)
# (1) gre, gpa, rank를 이용해 합격 여부(admit)를 예측하는 로지스틱 모델을 만드시오(0: 불합격, 1:합격).
adm <- glm(admit ~ ., data = mydata)
adm
# (2) mydata에서 합격 여부(admit)를 제외한 데이터를 예측 대상 데이터로 하여 (1)에서 만든 모델에 입력하여
# 합격 여부를 예측하고 실제값과 예측값을 나타내시오.
my <- mydata[,-1]; head(my)
pred <- predict(adm, my)
head(pred)
pred <- round(pred)
pred #예측값
answer <- mydata$admit # 실제값
# (3) 만들어진 모델의 예측 정확도를 나타내시오.
pred == answer
mod <- mean(pred == answer)
mod
head(pred)
pred <- round(pred)
pred #예측값
answer <- mydata$admit # 실제값
#실제값 standard
#예측값 test.round
standard <- as.integer(mydata$admit)
a <- standard == test.round
a
table(a)
table(standard)
table(a)
ratio
table(test.round)
setwd()
setwd(C:/workR/learnR/project/FinalTeamPRJ/인구)
read.csv(file = "전출입지 , 나이 별 이동자수 13-18.csv")
pop <- read.csv(file = "전출입지 , 나이 별 이동자수 13-18.csv")
pop
pop <- read.csv(file = "전출입지 , 나이 별 이동자수 13-18.csv")
pop <- read.csv("전출입지 , 나이 별 이동자수 13-18.csv")
setwd(C:/workR/learnR/project/FinalTeamPRJ/인구)
setwd(C:/workR/learnR/project/FinalTeamPRJ/인구)
getwd()
setwd(C:/workR/learnR/project/FinalTeamPRJ/인구)
setwd("C:/workR/learnR/project/FinalTeamPRJ/인구")
pop <- read.csv("전출입지 , 나이 별 이동자수 13-18.csv")
pop
str(pop)
pop <- read.csv("전출입지 , 나이 별 이동자수 13-18.csv",as.is = T)
pop
pop <- read.csv("전출입지 , 나이 별 이동자수 13-18.csv",as.is = T,header = F)
pop
View(pop)
colnames("전출지","전입지","성별","연령별","항목","단위",
"2013년","2014년","2015년,"2016년","2017년","2018년")
View(pop)
"2013년","2014년","2015년,"2016년","2017년","2018년"]
"2014년","2015년,"2016년","2017년","2018년")
colnames(pop) <- c("전출지","전입지","성별","연령별","항목","단위","2013년","2014년","2015년,"2016년","2017년","2018년")
View(pop)
colnames(pop) <- c("전출지","전입지","성별",
"연령별","항목","단위","2013년","2014년","2015년,"2016년","2017년","2018년")
colnames(pop) <- c("전출지","전입지","성별",
"연령별","항목","단위","2013년","2014년","2015년","2016년","2017년","2018년")
View(pop)
dim(pop)
pop <- pop(-c(1,13)
pop <- pop[-c(1,13]
pop
View(pop)
pop <- pop[-c(1,13]
pop <- pop[-c(1,13)]
View(pop)
pop <- pop[-c(1,13)]
pop
View(pop)
pop <- pop[-1,-13]
View(pop)
setwd("C:/workR/learnR/project/FinalTeamPRJ/인구")
pop <- read.csv("전출입지 , 나이 별 이동자수 13-18.csv",as.is = T,header = F)
pop
str(pop)
View(pop)
pop <- pop[-1,-13]
View(pop)
colnames(pop) <- c("전출지","전입지","성별",
"연령별","항목","단위","2013년","2014년","2015년","2016년","2017년","2018년")
View(pop)
pop <- subset(pop,전입지=="제주특별자치도")
pop
View(pop)
pop <- pop[,-1]
View(pop)
pop <- pop[,-2]
View(pop)
pop %>%
group_by(연령별)
pop.1 <- pop %>%
group_by(연령별)
pop.1
pop.s
pop.s <- pop %>%
group_by(연령별)
pop.s
View(pop.s)
pop <- pop[,-1]; pop <- pop[,-2]
setwd("C:/workR/learnR/project/FinalTeamPRJ/인구")
pop <- read.csv("전출입지 , 나이 별 이동자수 13-18.csv",as.is = T,header = F)
pop
str(pop)
View(pop)
colnames(pop) <- c("전출지","전입지","성별",
"연령별","항목","단위","2013년","2014년","2015년","2016년","2017년","2018년")
dim(pop)
pop <- pop[-1,-13]
pop <- subset(pop,전입지=="제주특별자치도")
pop <- pop[,-1]; pop <- pop[,-2]
View(pop)
pop.s <- pop %>%
group_by(연령별) %>%
summarise()
View(pop/s)
View(pop.s)
pop.s <- pop %>%
select(	0 - 4세) %>%
summarise()
pop.s <- pop %>%
select(	"0 - 4세") %>%
summarise()
View(pop.s)
pop <- subset(pop,전입지=="제주특별자치도")
pop <- pop[,-1]; pop <- pop[,-2]
pop.s <- pop %>%
select(	"0 - 4세") %>%
summarise()
View(pop.s)
pop.s <- pop %>%
summarise(연령별)
setwd("C:/workR/learnR/project/FinalTeamPRJ/인구")
pop <- read.csv("전출입지 , 나이 별 이동자수 13-18.csv",as.is = T,header = F)
pop
colnames(pop) <- c("전출지","전입지","성별",
"연령별","항목","단위","2013년","2014년","2015년","2016년","2017년","2018년")
dim(pop)
pop <- pop[-1,-13]
View(pop)
pop <- subset(pop,전입지=="제주특별자치도")
pop <- pop[,-1]; pop <- pop[,-2]
View(pop)
s2 <- c("이동자수","순이동자수")
pop.s <- pop %>%
group_by(s1,s2)
s1 <- c("0 - 4세","10 - 14세","15 - 19세","20 - 24세","25 - 29세",
"30 - 34세","35 - 39세","40 - 44세","45 - 49세","5 - 9세","50 - 54세",
"55 - 59세",'60 - 64세','65 - 69세','70 - 74세','75 - 79세','80세이상')
s2 <- c("이동자수","순이동자수")
pop.s <- pop %>%
group_by(s1,s2)
pop.s <- pop %>%
group_by("연령별",s1)
pop.s <- pop %>%
group_by("연령별","항목")
pop.s
View(pop.s)
pop.s <- pop %>%
group_by("연령별","항목")
View(pop.s)
pop.s <- pop %>%
summarise("연령별","항목")
View(pop.s)
pop.s <- pop %>%
group_by("연령별","항목") %>%
sum()
pop <- pop[-1,-13]
pop <- read.csv("전출입지 , 나이 별 이동자수 13-18.csv",as.is = T,header = F)
pop
str(pop)
colnames(pop) <- c("전출지","전입지","성별",
"연령별","항목","단위","2013년","2014년","2015년","2016년","2017년","2018년")
pop <- pop[-1,-13]
pop <- subset(pop,전입지=="제주특별자치도")
pop <- pop[,-1]; pop <- pop[,-2] ; pop <- subset(pop,)
View(pop)
pop <- data.frame(pop[,c(5:10)])
pop <- as.numeric(pop[,c(5:10)])
pop <- as.numeric(pop[,c(5:10)])
setwd("C:/workR/learnR/project/FinalTeamPRJ/인구")
pop <- read.csv("전출입지 , 나이 별 이동자수 13-18.csv",as.is = T,header = F)
pop
str(pop)
View(pop)
colnames(pop) <- c("전출지","전입지","성별",
"연령별","항목","단위","2013년","2014년","2015년","2016년","2017년","2018년")
dim(pop)
pop <- pop[-1,-13]
pop <- subset(pop,전입지=="제주특별자치도")
pop <- pop[,-1]; pop <- pop[,-2] ; pop <- subset(pop,)
View(pop)
pop <- as.numeric(pop[,c(5:10)])
pop <- data.frame(pop)
View(pop)
pop <- as.numeric(pop[,c(5:10)])
pop.s <- pop %>%
group_by("연령별","항목") %>%
sum(5:10)
pop <- as.integer(pop[,c(5:10)])
f$sum <- df$v1 + df$v2
df
df[2,1] <- 5
df
df <- data.frame( id = c (1,2,3,4,5,6),
class = c(1,1,1,1,2,2),
math = c( 50,60,45,30,25,50),
english = c(98,97,86,98,80,89),
science = c(50,60,78,58,65,98))
df
df %>% filter(class == 1 )
df %>% select ( math )
df <- rename ( df, v1 = var1, v2 = var2)
df
#파생변수 추가
df$sum <- df$v1 + df$v2
df
df[2,1] <- 5
df
df <- data.frame( id = c (1,2,3,4,5,6),
class = c(1,1,1,1,2,2),
math = c( 50,60,45,30,25,50),
english = c(98,97,86,98,80,89),
science = c(50,60,78,58,65,98))
df
class1 <- df %>% filter( class == 1 )
class2 <- df %>% filter( class == 2 )
class1
class2
class1
class2
df %>% select ( math )
setwd("C:/workR/learnR/project/FinalTeamPRJ/인구")
pop <- read.csv("전출입지 , 나이 별 이동자수 13-18.csv",as.is = T,header = F)
pop
str(pop)
View(pop)
colnames(pop) <- c("전출지","전입지","성별",
"연령별","항목","단위","2013년","2014년","2015년","2016년","2017년","2018년")
dim(pop)
pop <- pop[-1,-13]
pop <- subset(pop,전입지=="제주특별자치도")
pop <- pop[,-1]; pop <- pop[,-2] ; pop <- subset(pop,)
View(pop)
str(pop)
pop <- as.integer(pop[,c(5:10)])
pop <- as.numeric(pop[,c(5:10)])
pop
pop <- as.numeric(pop[,c(5:10)])
pop
pop <- as.numeric(pop[,c(5:10)])
pop <- as.numeric(pop[-1,c(5:10)])
pop
